#!/bin/sh

BASEDIR=`dirname $0`/..
BASEDIR=`(cd "$BASEDIR"; pwd)`

[ -f "/etc/profile" ] && source /etc/profile
[ -f "$BASEDIR"/bin/setenv ] && . "$BASEDIR"/bin/setenv

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  Darwin*) darwin=true
           if [ -z "$JAVA_VERSION" ] ; then
             JAVA_VERSION="CurrentJDK"
           else
             echo "Using Java version: $JAVA_VERSION"
           fi
           if [ -z "$JAVA_HOME" ] ; then
             JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/${JAVA_VERSION}/Home
           fi
           ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] && CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# If a specific java binary isn't specified search for the standard 'java' binary
if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD=`which java`
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly."
  echo "  We cannot execute $JAVACMD"
  exit 1
fi

if [ -z "$REPO" ]
then
  REPO="$BASEDIR"/repo
fi

CLASSPATH=$CLASSPATH_PREFIX
EXTRA_JVM_ARGUMENTS=""

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$CLASSPATH" ] && CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$HOME" ] && HOME=`cygpath --path --windows "$HOME"`
  [ -n "$BASEDIR" ] && BASEDIR=`cygpath --path --windows "$BASEDIR"`
  [ -n "$REPO" ] && REPO=`cygpath --path --windows "$REPO"`
fi

# When no TTY is available, don't output to console
have_tty=0
if [ "`tty`" != "not a tty" ]; then
    have_tty=1
fi

# only output this if we have a TTY
if [ $have_tty -eq 1 ]; then
  echo "Using ZDTEST_HOME :  $BASEDIR"
  echo "Using EXPORT_HOME :  $EXPORT_DIR"
  echo "Using DUMP_HOME :  $DUMP_DIR"
  echo "Using JAVA_HOME:  $JAVA_HOME"
  echo "CLASSPATH: $CLASSPATH_PREFIX"
fi

APP=smarttesting

if [ "$1" = "run" ] ; then

  exec "$JAVACMD" $JAVA_OPTS \
  $EXTRA_JVM_ARGUMENTS \
  -classpath "$CLASSPATH" \
  -Dapp.name="$APP" \
  -Dapp.pid="$PID" \
  -Dapp.repo="$REPO" \
  -Dbasedir="$BASEDIR" \
  -Dexportdir="$EXPORT_DIR" \
  smarttesting.Main start
 
elif [ "$1" = "start" ] ; then

  exec "$JAVACMD" $JAVA_OPTS \
  $EXTRA_JVM_ARGUMENTS \
  -classpath "$CLASSPATH" \
  -Dapp.name="$APP" \
  -Dapp.pid="$PID" \
  -Dapp.repo="$REPO" \
  -Dbasedir="$BASEDIR" \
  -Dexportdir="$EXPORT_DIR" \
  smarttesting.Main start \
   >> /dev/null 2>&1 &
  
elif [ "$1" = "restart" ] ; then

  exec "$JAVACMD" $JAVA_OPTS \
  $EXTRA_JVM_ARGUMENTS \
  -classpath "$CLASSPATH" \
  -Dapp.name="$APP" \
  -Dapp.pid="$PID" \
  -Dapp.repo="$REPO" \
  -Dbasedir="$BASEDIR" \
  -Dexportdir="$EXPORT_DIR" \
  smarttesting.Main restart \
  >> /dev/null 2>&1 &
  
elif [ "$1" = "stop" ] ; then

  exec "$JAVACMD" $JAVA_OPTS \
  $EXTRA_JVM_ARGUMENTS \
  -classpath "$CLASSPATH" \
  -Dapp.name="$APP" \
  -Dapp.pid="$PID" \
  -Dapp.repo="$REPO" \
  -Dbasedir="$BASEDIR" \
  -Dexportdir="$EXPORT_DIR" \
  smarttesting.Main stop
  
elif [ "$1" = "version" ]; then

  exec "$JAVACMD" \
  -classpath "$CLASSPATH" \
  smarttesting.Main version
  
else
  echo "-----------------------------------------------------------------------------------------"
  echo "Usage:  ( commands ... )"
  echo "commands:"
  echo "  run               Start  in the current window"
  echo "  start             Start  in a separate window"
  echo "  restart           Start  in a separate window, If unable to remove or clear stale PID file."
  echo "  stop              Stop  "
  echo "  version           What version of  are you running?"
  echo "-----------------------------------------------------------------------------------------"
  exit 1
fi
